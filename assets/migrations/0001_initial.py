# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2019-04-14 10:11
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(default=0, max_length=128, verbose_name='用户类型')),
                ('enabled', models.BooleanField(default=True, verbose_name='是否运行登录堡垒机')),
                ('login_count', models.IntegerField(default=0, verbose_name='登录认证失败次数')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='名称')),
                ('mgaddress', models.GenericIPAddressField(unique=True, verbose_name='远程管理地址')),
                ('lanip', models.GenericIPAddressField(blank=True, null=True, unique=True, verbose_name='内网IP')),
                ('wanip', models.GenericIPAddressField(blank=True, null=True, unique=True, verbose_name='外网IP')),
                ('port', models.IntegerField(default=22, verbose_name='ssh端口')),
                ('sn', models.CharField(max_length=265, unique=True, verbose_name='sn')),
                ('cpu_count', models.CharField(blank=True, max_length=16, null=True, verbose_name='逻辑CPU个数')),
                ('cpu_core_count', models.CharField(blank=True, max_length=16, null=True, verbose_name='物理CPU个数')),
                ('memory', models.CharField(blank=True, max_length=16, null=True, verbose_name='内存')),
                ('disk', models.TextField(blank=True, null=True, verbose_name='磁盘')),
                ('network', models.CharField(blank=True, choices=[('专有网络', '专有网络'), ('经典网络', '经典网络'), ('other', 'other')], default='other', max_length=16, null=True)),
                ('create_time', models.DateTimeField(blank=True, null=True, verbose_name='主机购买时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('sys_images', models.CharField(blank=True, max_length=128, null=True, verbose_name='系统镜像')),
                ('kernel_version', models.CharField(blank=True, max_length=64, null=True, verbose_name='内核版本')),
                ('os_release', models.CharField(default='Ubuntu 14.04.3 LTS', max_length=256, verbose_name='系统发行版本')),
                ('architecture', models.CharField(blank=True, max_length=64, null=True, verbose_name='系统架构')),
                ('systemtime', models.CharField(blank=True, max_length=128, null=True, verbose_name='系统时间')),
                ('admin', models.CharField(blank=True, max_length=128, null=True, verbose_name='资产管理人员')),
                ('docker_version', models.CharField(blank=True, max_length=32, null=True, verbose_name='docker版本')),
                ('storage_driver', models.CharField(blank=True, max_length=128, null=True, verbose_name='存储驱动')),
                ('containers_count', models.CharField(blank=True, max_length=16, null=True, verbose_name='容器数量')),
                ('containers_running', models.CharField(blank=True, max_length=16, verbose_name='运行容器数量')),
                ('containers_paused', models.CharField(blank=True, max_length=16, verbose_name='暂停运行的容器数量')),
                ('containers_stopped', models.CharField(blank=True, max_length=16, verbose_name='停止的容器数量')),
                ('containers_images', models.CharField(blank=True, max_length=16, verbose_name='镜像数量')),
                ('asset_env', models.SmallIntegerField(choices=[(1, '生产环境'), (2, '测试环境')], default=1)),
                ('asset_project', models.CharField(blank=True, max_length=128, null=True, verbose_name='资产所属项目')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='AssetRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True, verbose_name='资产变更详情')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.Asset')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='资产手动更新人')),
            ],
        ),
        migrations.CreateModel(
            name='container_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=128, null=True, verbose_name='用户名')),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='密码')),
            ],
        ),
        migrations.CreateModel(
            name='DockerAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('container_name', models.CharField(blank=True, max_length=32, null=True, verbose_name='容器名')),
                ('container_id', models.CharField(max_length=256, unique=True, verbose_name='容器id')),
                ('images', models.CharField(blank=True, max_length=64, null=True, verbose_name='镜像')),
                ('network', models.CharField(blank=True, max_length=64, null=True, verbose_name='容器网络类型')),
                ('platform', models.CharField(blank=True, max_length=128, null=True, verbose_name='容器基于系统平台')),
                ('created', models.CharField(blank=True, max_length=128, null=True, verbose_name='容器创建时间')),
                ('startedat', models.CharField(blank=True, max_length=128, null=True, verbose_name='容器启动时间')),
                ('status', models.CharField(blank=True, max_length=64, null=True, verbose_name='容器状态')),
                ('workingdir', models.CharField(blank=True, max_length=128, null=True, verbose_name='指定工作目录')),
                ('env', models.TextField(blank=True, null=True, verbose_name='容器环境变量')),
                ('run', models.TextField(blank=True, null=True, verbose_name='容器启动命令')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asset', related_query_name='asset', to='assets.Asset')),
            ],
        ),
        migrations.CreateModel(
            name='DockerPort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_port', models.CharField(blank=True, max_length=16, null=True, verbose_name='映射本机端口')),
                ('container_port', models.CharField(blank=True, max_length=16, null=True, verbose_name='容器端口')),
            ],
        ),
        migrations.CreateModel(
            name='DockerStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(blank=True, max_length=128, null=True, verbose_name='本地挂载目录')),
                ('destination', models.CharField(blank=True, max_length=128, null=True, verbose_name='容器目录')),
            ],
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('content', models.TextField()),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('asset_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assets.Asset')),
            ],
            options={
                'verbose_name_plural': '错误日志表',
            },
        ),
        migrations.CreateModel(
            name='HostBindRemoteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.Asset')),
            ],
        ),
        migrations.CreateModel(
            name='HostGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='主机组名称')),
                ('hostbindremoteusers', models.ManyToManyField(to='assets.HostBindRemoteUser')),
            ],
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='机房名称')),
                ('region', models.CharField(blank=True, max_length=16, null=True, verbose_name='可用区')),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=16, null=True, verbose_name='登录用户')),
                ('host', models.CharField(max_length=128, null=True, verbose_name='登录主机')),
                ('remote_ip', models.CharField(max_length=16, verbose_name='来源IP')),
                ('login_type', models.CharField(choices=[('web', 'web'), ('ssh', 'ssh')], default='web', max_length=8, verbose_name='登录方式')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='登录时间')),
                ('end_time', models.DateTimeField(null=True, verbose_name='结束时间')),
                ('hour_longtime', models.CharField(blank=True, max_length=256, null=True, verbose_name='登录时长')),
            ],
            options={
                'verbose_name': '登录日志',
                'verbose_name_plural': '登录日志',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='RecorderLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logpath', models.TextField(blank=True, null=True, verbose_name='回放日志存储路径')),
                ('log', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.Log')),
            ],
            options={
                'verbose_name': '回放日志',
                'verbose_name_plural': '回放日志',
            },
        ),
        migrations.CreateModel(
            name='RemoteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_type', models.SmallIntegerField(choices=[(0, 'ssh-password'), (1, 'ssh-key')], default=0)),
                ('username', models.CharField(max_length=32)),
                ('password', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TtyLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='命令执行时间')),
                ('cmd', models.CharField(max_length=200)),
                ('log', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assets.Log')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
            },
        ),
        migrations.AlterUniqueTogether(
            name='remoteuser',
            unique_together=set([('auth_type', 'username', 'password')]),
        ),
        migrations.AddField(
            model_name='hostbindremoteuser',
            name='remote_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.RemoteUser'),
        ),
        migrations.AddField(
            model_name='dockerasset',
            name='container_port',
            field=models.ManyToManyField(blank=True, to='assets.DockerPort', verbose_name='容器端口映射'),
        ),
        migrations.AddField(
            model_name='dockerasset',
            name='container_storage',
            field=models.ManyToManyField(blank=True, to='assets.DockerStorage', verbose_name='容器目录映射'),
        ),
        migrations.AddField(
            model_name='dockerasset',
            name='container_user',
            field=models.ManyToManyField(blank=True, to='assets.container_user', verbose_name='容器服务管理用户'),
        ),
        migrations.AlterUniqueTogether(
            name='container_user',
            unique_together=set([('username', 'password')]),
        ),
        migrations.AddField(
            model_name='asset',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assets.IDC', verbose_name='所在机房'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='host_groups',
            field=models.ManyToManyField(blank=True, to='assets.HostGroup', verbose_name='所属堡垒机用户组'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='remote_user_bind_hosts',
            field=models.ManyToManyField(blank=True, to='assets.HostBindRemoteUser', verbose_name='堡垒机用户管理主机用户'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='hostbindremoteuser',
            unique_together=set([('host', 'remote_user')]),
        ),
    ]
